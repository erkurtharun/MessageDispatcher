services:
  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: MyPassw0rd123!
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-net

  redis:
    image: redis:8-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-net

  etcd:
    image: bitnami/etcd:3.6.2-debian-12-r0
    restart: unless-stopped
    environment:
      ALLOW_NONE_AUTHENTICATION: yes
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
    ports:
      - "2379:2379"
    volumes:
      - etcd-data:/bitnami/etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-net

  app:
    build: .
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      APP_DB_URL: postgres://postgres_user:MyPassw0rd123!@db:5432/postgres?sslmode=disable
      APP_REDIS_ADDR: redis:6379
      APP_REMOTE_ETCD_ENDPOINTS: etcd:2379
    env_file:
      - .env
    volumes:
      - ./configs:/app/configs         # Configler için tut (dev hot-reload için)
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      etcd:
        condition: service_healthy
    networks:
      - app-net

volumes:
  db-data:
  redis-data:
  etcd-data:

networks:
  app-net:
    driver: bridge